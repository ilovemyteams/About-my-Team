/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
    _type: "sanity.imagePaletteSwatch";
    background?: string;
    foreground?: string;
    population?: number;
    title?: string;
};

export type SanityImagePalette = {
    _type: "sanity.imagePalette";
    darkMuted?: SanityImagePaletteSwatch;
    lightVibrant?: SanityImagePaletteSwatch;
    darkVibrant?: SanityImagePaletteSwatch;
    vibrant?: SanityImagePaletteSwatch;
    dominant?: SanityImagePaletteSwatch;
    lightMuted?: SanityImagePaletteSwatch;
    muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
    _type: "sanity.imageDimensions";
    height?: number;
    width?: number;
    aspectRatio?: number;
};

export type SanityFileAsset = {
    _id: string;
    _type: "sanity.fileAsset";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    originalFilename?: string;
    label?: string;
    title?: string;
    description?: string;
    altText?: string;
    sha1hash?: string;
    extension?: string;
    mimeType?: string;
    size?: number;
    assetId?: string;
    uploadId?: string;
    path?: string;
    url?: string;
    source?: SanityAssetSourceData;
};

export type Geopoint = {
    _type: "geopoint";
    lat?: number;
    lng?: number;
    alt?: number;
};

export type ColorTheme = {
    _id: string;
    _type: "colorTheme";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    text?: Color;
    background?: Color;
};

export type MenuItem = {
    _type: "menuItem";
    title?: Array<
        {
            _key: string;
        } & InternationalizedArrayStringValue
    >;
    linkInternal?: string;
};

export type Stage = {
    _type: "stage";
    title?: Array<
        {
            _key: string;
        } & InternationalizedArrayStringValue
    >;
    description?: Array<
        {
            _key: string;
        } & InternationalizedArrayTextValue
    >;
};

export type AnchorLink = {
    _type: "anchorLink";
    subtitle?: Array<
        {
            _key: string;
        } & InternationalizedArrayStringValue
    >;
    anchorId?: Slug;
};

export type AboutUsItem = {
    _type: "aboutUsItem";
    aboutUs?: Array<
        {
            _key: string;
        } & InternationalizedArrayStringValue
    >;
};

export type SocialLinks = {
    _type: "socialLinks";
    platform?:
        | "linkedin"
        | "telegram"
        | "github"
        | "behance"
        | "googleDrive"
        | "whatsapp"
        | "youtube"
        | "pinterest"
        | "email"
        | "facebook"
        | "instagram"
        | "twitter";
    url?: LinkExternal;
};

export type Milestone = {
    _type: "milestone";
    title?: string;
    description?: string;
    image?: {
        asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
    };
    tags?: Array<string>;
    duration?: Duration;
};

export type Duration = {
    _type: "duration";
    start?: string;
    end?: string;
};

export type Timeline = {
    _type: "timeline";
    items?: Array<{
        title?: string;
        milestones?: Array<
            {
                _key: string;
            } & Milestone
        >;
        _type: "item";
        _key: string;
    }>;
};

export type Instagram = {
    _type: "instagram";
    url?: string;
};

export type ImageFeature = {
    _type: "imageFeature";
    image?: {
        asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
    };
    variant?: string | "caption" | "callToAction";
    caption?: string;
    callToAction?: ImageCallToAction;
};

export type Images = {
    _type: "images";
    imageFeatures?: Array<
        {
            _key: string;
        } & ImageFeature
    >;
    fullWidth?: boolean;
    verticalAlign?: "top" | "center" | "bottom";
};

export type ImageCallToAction = {
    _type: "imageCallToAction";
    title?: string;
    link?: Array<
        | ({
              _key: string;
          } & LinkInternal)
        | ({
              _key: string;
          } & LinkExternal)
    >;
};

export type Grid = {
    _type: "grid";
    items?: Array<
        {
            _key: string;
        } & GridItem
    >;
};

export type GridItem = {
    _type: "gridItem";
    title?: string;
    image?: {
        asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
    };
    body?: Array<{
        children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
        }>;
        style?:
            | "normal"
            | "h1"
            | "h2"
            | "h3"
            | "h4"
            | "h5"
            | "h6"
            | "blockquote";
        listItem?: "bullet" | "number";
        markDefs?: Array<
            | ({
                  _key: string;
              } & LinkEmail)
            | ({
                  _key: string;
              } & LinkInternal)
            | ({
                  _key: string;
              } & LinkExternal)
        >;
        level?: number;
        _type: "block";
        _key: string;
    }>;
};

export type Callout = {
    _type: "callout";
    text?: string;
    link?: Array<
        | ({
              _key: string;
          } & LinkInternal)
        | ({
              _key: string;
          } & LinkExternal)
    >;
};

export type Accordion = {
    _type: "accordion";
    groups?: Array<
        {
            _key: string;
        } & AccordionGroup
    >;
};

export type AccordionGroup = {
    _type: "accordionGroup";
    title?: string;
    body?: Array<{
        children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
        }>;
        style?:
            | "normal"
            | "h1"
            | "h2"
            | "h3"
            | "h4"
            | "h5"
            | "h6"
            | "blockquote";
        listItem?: "bullet" | "number";
        markDefs?: Array<
            | ({
                  _key: string;
              } & LinkEmail)
            | ({
                  _key: string;
              } & LinkInternal)
            | ({
                  _key: string;
              } & LinkExternal)
        >;
        level?: number;
        _type: "block";
        _key: string;
    }>;
};

export type PortableColorTitle = Array<{
    children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: never;
    markDefs?: null;
    level?: number;
    _type: "block";
    _key: string;
}>;

export type PortableTextSimple = Array<{
    children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<
        | ({
              _key: string;
          } & LinkEmail)
        | ({
              _key: string;
          } & LinkInternal)
        | ({
              _key: string;
          } & LinkExternal)
    >;
    level?: number;
    _type: "block";
    _key: string;
}>;

export type PortableText = Array<
    | {
          children?: Array<{
              marks?: Array<string>;
              text?: string;
              _type: "span";
              _key: string;
          }>;
          style?:
              | "normal"
              | "h1"
              | "h2"
              | "h3"
              | "h4"
              | "h5"
              | "h6"
              | "blockquote";
          listItem?: "bullet" | "number";
          markDefs?: Array<
              | ({
                    _key: string;
                } & LinkEmail)
              | ({
                    _key: string;
                } & LinkInternal)
              | ({
                    _key: string;
                } & LinkExternal)
          >;
          level?: number;
          _type: "block";
          _key: string;
      }
    | ({
          _key: string;
      } & Accordion)
    | ({
          _key: string;
      } & Callout)
    | ({
          _key: string;
      } & Grid)
    | ({
          _key: string;
      } & Images)
    | ({
          _key: string;
      } & Instagram)
>;

export type Customer = {
    _id: string;
    _type: "customer";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: Array<
        {
            _key: string;
        } & InternationalizedArrayStringValue
    >;
    position?: Array<
        {
            _key: string;
        } & InternationalizedArrayStringValue
    >;
    phoneNumber?: Array<string>;
    socialLinks?: Array<
        {
            _key: string;
        } & SocialLinks
    >;
    gender?: "female" | "male" | "unknown";
    country?: string;
    comment?: string;
};

export type Tool = {
    _id: string;
    _type: "tool";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
};

export type Service = {
    _id: string;
    _type: "service";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: Array<
        {
            _key: string;
        } & InternationalizedArrayStringValue
    >;
    description?: Array<
        {
            _key: string;
        } & InternationalizedArrayTextValue
    >;
};

export type Faq = {
    _id: string;
    _type: "faq";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    numberOfLikes?: number;
    question?: Array<
        {
            _key: string;
        } & InternationalizedArrayStringValue
    >;
    shortAnswer?: Array<
        {
            _key: string;
        } & InternationalizedArrayTextValue
    >;
    image?: {
        image?: {
            asset?: {
                _ref: string;
                _type: "reference";
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: "image";
        };
        caption?: Array<
            {
                _key: string;
            } & InternationalizedArrayStringValue
        >;
    };
    fullAnswer?: {
        topText?: Array<
            {
                _key: string;
            } & InternationalizedArrayTextValue
        >;
        mainContent?: {
            designType?: "stages" | "table";
            mainContentText?: Array<
                {
                    _key: string;
                } & InternationalizedArrayPortableTextValue
            >;
        };
        orderContent?: {
            image?: {
                asset?: {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
                };
                hotspot?: SanityImageHotspot;
                crop?: SanityImageCrop;
                _type: "image";
            };
            orderText?: Array<
                {
                    _key: string;
                } & InternationalizedArrayTextValue
            >;
        };
    };
};

export type Review = {
    _id: string;
    _type: "review";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    project?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "project";
    };
    reviewer?: Array<
        | {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              _key: string;
              [internalGroqTypeReferenceTo]?: "customer";
          }
        | {
              name?: Array<
                  {
                      _key: string;
                  } & InternationalizedArrayStringValue
              >;
              position?: Array<
                  {
                      _key: string;
                  } & InternationalizedArrayStringValue
              >;
              _key: string;
          }
    >;
    image?: {
        image?: {
            asset?: {
                _ref: string;
                _type: "reference";
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: "image";
        };
        caption?: Array<
            {
                _key: string;
            } & InternationalizedArrayStringValue
        >;
    };
    reviewText?: Array<
        {
            _key: string;
        } & InternationalizedArrayTextValue
    >;
    reviewUrl?: LinkExternal;
};

export type Project = {
    _id: string;
    _type: "project";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: Array<
        {
            _key: string;
        } & InternationalizedArrayStringValue
    >;
    description?: Array<
        {
            _key: string;
        } & InternationalizedArrayTextValue
    >;
    customers?: Array<{
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        _key: string;
        [internalGroqTypeReferenceTo]?: "customer";
    }>;
    startDate?: string;
    endDate?: string;
    category?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "siteCategory";
    };
    status?: "recruitingTeam" | "development" | "completed";
    teamMembers?: Array<{
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        _key: string;
        [internalGroqTypeReferenceTo]?: "team";
    }>;
    URL?: LinkExternal;
    image?: {
        image?: {
            asset?: {
                _ref: string;
                _type: "reference";
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: "image";
        };
        caption?: Array<
            {
                _key: string;
            } & InternationalizedArrayStringValue
        >;
    };
    stages?: Array<string>;
};

export type SiteCategory = {
    _id: string;
    _type: "siteCategory";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    categoryName?: Array<
        {
            _key: string;
        } & InternationalizedArrayStringValue
    >;
};

export type Team = {
    _id: string;
    _type: "team";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: Array<
        {
            _key: string;
        } & InternationalizedArrayStringValue
    >;
    role?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "specialist";
    };
    price?: number;
    isAvaliblePerson?: "Show price" | "Do not show price";
    about?: Array<
        {
            _key: string;
        } & InternationalizedArrayTextValue
    >;
    services?: Array<
        {
            _key: string;
        } & InternationalizedArrayTextValue
    >;
    projects?: Array<
        | ({
              _key: string;
          } & LinkExternal)
        | {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              _key: string;
              [internalGroqTypeReferenceTo]?: "project";
          }
    >;
    photo?: {
        asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
    };
    socialLinks?: Array<
        {
            _key: string;
        } & SocialLinks
    >;
    tools?: Array<{
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        _key: string;
        [internalGroqTypeReferenceTo]?: "tool";
    }>;
};

export type Specialist = {
    _id: string;
    _type: "specialist";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    category?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "specialistCategory";
    };
};

export type SpecialistCategory = {
    _id: string;
    _type: "specialistCategory";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: Array<
        {
            _key: string;
        } & InternationalizedArrayStringValue
    >;
};

export type LinkInternal = {
    _type: "linkInternal";
    reference?:
        | {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "home";
          }
        | {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "page";
          };
};

export type Page = {
    _id: string;
    _type: "page";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: Array<
        {
            _key: string;
        } & InternationalizedArrayStringValue
    >;
    parentPage?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
    };
    pageSlug?: Slug;
    pageBuilder?: Array<
        | ({
              _key: string;
          } & HeroHome)
        | ({
              _key: string;
          } & CallToAction)
    >;
    seo?: Seo;
};

export type Home = {
    _id: string;
    _type: "home";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    pageSlug?: Slug;
    hero?: HeroHome;
    aboutUsHomeSection?: AboutUsHomeSection;
    ctaSectionJoinUs?: CallToAction;
    portfolioHome?: PortfolioHome;
    reviewsHome?: ReviewsHome;
    ctaSectionWriteUs?: CallToAction;
    servicesHome?: ServicesHome;
    teamHome?: TeamHome;
    ctaSectionJoinUsSecond?: CallToAction;
    stagesHome?: StagesHome;
    faqHome?: FaqHome;
    ctaSectionOrder?: CallToAction;
};

export type FaqHome = {
    _type: "faqHome";
    sectionId?: AnchorLink;
    title?: Array<
        {
            _key: string;
        } & InternationalizedArrayPortableColorTitleValue
    >;
    faqList?: Array<{
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        _key: string;
        [internalGroqTypeReferenceTo]?: "faq";
    }>;
};

export type StagesHome = {
    _type: "stagesHome";
    sectionId?: AnchorLink;
    title?: Array<
        {
            _key: string;
        } & InternationalizedArrayPortableColorTitleValue
    >;
    stagesList?: Array<
        {
            _key: string;
        } & Stage
    >;
};

export type TeamHome = {
    _type: "teamHome";
    sectionId?: AnchorLink;
    title?: Array<
        {
            _key: string;
        } & InternationalizedArrayPortableColorTitleValue
    >;
    projectsList?: Array<{
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        _key: string;
        [internalGroqTypeReferenceTo]?: "project";
    }>;
};

export type ServicesHome = {
    _type: "servicesHome";
    sectionId?: AnchorLink;
    title?: Array<
        {
            _key: string;
        } & InternationalizedArrayPortableColorTitleValue
    >;
    servicesList?: Array<{
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        _key: string;
        [internalGroqTypeReferenceTo]?: "service";
    }>;
    description?: Array<
        {
            _key: string;
        } & InternationalizedArrayTextValue
    >;
};

export type ReviewsHome = {
    _type: "reviewsHome";
    sectionId?: AnchorLink;
    title?: Array<
        {
            _key: string;
        } & InternationalizedArrayPortableColorTitleValue
    >;
    reviewsSlider?: Array<{
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        _key: string;
        [internalGroqTypeReferenceTo]?: "review";
    }>;
};

export type PortfolioHome = {
    _type: "portfolioHome";
    sectionId?: AnchorLink;
    title?: Array<
        {
            _key: string;
        } & InternationalizedArrayPortableColorTitleValue
    >;
    portfolioSlider?: Array<{
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        _key: string;
        [internalGroqTypeReferenceTo]?: "project";
    }>;
};

export type CallToAction = {
    _type: "callToAction";
    title?: Array<
        {
            _key: string;
        } & InternationalizedArrayStringValue
    >;
    description?: Array<
        {
            _key: string;
        } & InternationalizedArrayPortableTextSimpleValue
    >;
};

export type AboutUsHomeSection = {
    _type: "aboutUsHomeSection";
    sectionId?: AnchorLink;
    sectionTitle?: Array<
        {
            _key: string;
        } & InternationalizedArrayPortableColorTitleValue
    >;
    aboutUsItemInfo?: Array<
        {
            _key: string;
        } & AboutUsItem
    >;
    learnMoreButton?: Button;
};

export type HeroHome = {
    _type: "heroHome";
    title?: Array<
        {
            _key: string;
        } & InternationalizedArrayTextValue
    >;
    portfolioSlider?: Array<{
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        _key: string;
        [internalGroqTypeReferenceTo]?: "project";
    }>;
};

export type LinkExternal = {
    _type: "linkExternal";
    url?: string;
    newWindow?: boolean;
};

export type LinkEmail = {
    _type: "linkEmail";
    email?: string;
};

export type InternationalizedArrayPortableColorTitleValue = {
    _type: "internationalizedArrayPortableColorTitleValue";
    value?: PortableColorTitle;
};

export type InternationalizedArrayPortableTextSimpleValue = {
    _type: "internationalizedArrayPortableTextSimpleValue";
    value?: PortableTextSimple;
};

export type InternationalizedArrayPortableTextValue = {
    _type: "internationalizedArrayPortableTextValue";
    value?: PortableText;
};

export type InternationalizedArrayTextValue = {
    _type: "internationalizedArrayTextValue";
    value?: string;
};

export type InternationalizedArrayStringValue = {
    _type: "internationalizedArrayStringValue";
    value?: string;
};

export type InternationalizedArrayPortableColorTitle = Array<
    {
        _key: string;
    } & InternationalizedArrayPortableColorTitleValue
>;

export type InternationalizedArrayPortableTextSimple = Array<
    {
        _key: string;
    } & InternationalizedArrayPortableTextSimpleValue
>;

export type InternationalizedArrayPortableText = Array<
    {
        _key: string;
    } & InternationalizedArrayPortableTextValue
>;

export type InternationalizedArrayText = Array<
    {
        _key: string;
    } & InternationalizedArrayTextValue
>;

export type InternationalizedArrayString = Array<
    {
        _key: string;
    } & InternationalizedArrayStringValue
>;

export type TranslationMetadata = {
    _id: string;
    _type: "translation.metadata";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    translations?: Array<
        {
            _key: string;
        } & InternationalizedArrayReferenceValue
    >;
    schemaTypes?: Array<string>;
};

export type InternationalizedArrayReferenceValue = {
    _type: "internationalizedArrayReferenceValue";
    value?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "settings";
    };
};

export type Settings = {
    _id: string;
    _type: "settings";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    language?: string;
    header?: Header;
    footer?: Footer;
    notFoundPage?: NotFoundPage;
    seo?: Seo;
    buttonBuyMeCoffee?: Button;
    buttonJoinUS?: Button;
    buttonOrder?: Button;
};

export type Button = {
    _type: "button";
    buttonName?: InternationalizedArrayString;
    buttonLink?: "noLink" | "internal" | "external";
    linkInternal?: LinkInternal;
    linkExternal?: LinkExternal;
};

export type SanityImageCrop = {
    _type: "sanity.imageCrop";
    top?: number;
    bottom?: number;
    left?: number;
    right?: number;
};

export type SanityImageHotspot = {
    _type: "sanity.imageHotspot";
    x?: number;
    y?: number;
    height?: number;
    width?: number;
};

export type SanityImageAsset = {
    _id: string;
    _type: "sanity.imageAsset";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    originalFilename?: string;
    label?: string;
    title?: string;
    description?: string;
    altText?: string;
    sha1hash?: string;
    extension?: string;
    mimeType?: string;
    size?: number;
    assetId?: string;
    uploadId?: string;
    path?: string;
    url?: string;
    metadata?: SanityImageMetadata;
    source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
    _type: "sanity.assetSourceData";
    name?: string;
    id?: string;
    url?: string;
};

export type SanityImageMetadata = {
    _type: "sanity.imageMetadata";
    location?: Geopoint;
    dimensions?: SanityImageDimensions;
    palette?: SanityImagePalette;
    lqip?: string;
    blurHash?: string;
    hasAlpha?: boolean;
    isOpaque?: boolean;
};

export type Seo = {
    _type: "seo";
    title?: InternationalizedArrayString;
    description?: InternationalizedArrayString;
    image?: {
        asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
    };
};

export type NotFoundPage = {
    _type: "notFoundPage";
    title?: InternationalizedArrayString;
    description?: InternationalizedArrayText;
    goToHomeButton?: Button;
};

export type Footer = {
    _type: "footer";
    title?: InternationalizedArrayPortableColorTitle;
    navigationMenu?: Array<
        {
            _key: string;
        } & MenuItem
    >;
    privacyPolicy?: {
        title?: InternationalizedArrayString;
        url?: {
            ua?: Array<
                | ({
                      _key: string;
                  } & LinkExternal)
                | ({
                      _key: string;
                  } & LinkInternal)
            >;
            en?: Array<
                | ({
                      _key: string;
                  } & LinkExternal)
                | ({
                      _key: string;
                  } & LinkInternal)
            >;
            pl?: Array<
                | ({
                      _key: string;
                  } & LinkExternal)
                | ({
                      _key: string;
                  } & LinkInternal)
            >;
        };
    };
    rightsReserved?: InternationalizedArrayString;
};

export type Header = {
    _type: "header";
    navigationMenu?: Array<
        {
            _key: string;
        } & MenuItem
    >;
    socialLinks?: Array<
        {
            _key: string;
        } & SocialLinks
    >;
};

export type InternationalizedArrayReference = Array<
    {
        _key: string;
    } & InternationalizedArrayReferenceValue
>;

export type Color = {
    _type: "color";
    hex?: string;
    alpha?: number;
    hsl?: HslaColor;
    hsv?: HsvaColor;
    rgb?: RgbaColor;
};

export type RgbaColor = {
    _type: "rgbaColor";
    r?: number;
    g?: number;
    b?: number;
    a?: number;
};

export type HsvaColor = {
    _type: "hsvaColor";
    h?: number;
    s?: number;
    v?: number;
    a?: number;
};

export type HslaColor = {
    _type: "hslaColor";
    h?: number;
    s?: number;
    l?: number;
    a?: number;
};

export type MediaTag = {
    _id: string;
    _type: "media.tag";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: Slug;
};

export type Slug = {
    _type: "slug";
    current?: string;
    source?: string;
};

export type AllSanitySchemaTypes =
    | SanityImagePaletteSwatch
    | SanityImagePalette
    | SanityImageDimensions
    | SanityFileAsset
    | Geopoint
    | ColorTheme
    | MenuItem
    | Stage
    | AnchorLink
    | AboutUsItem
    | SocialLinks
    | Milestone
    | Duration
    | Timeline
    | Instagram
    | ImageFeature
    | Images
    | ImageCallToAction
    | Grid
    | GridItem
    | Callout
    | Accordion
    | AccordionGroup
    | PortableColorTitle
    | PortableTextSimple
    | PortableText
    | Customer
    | Tool
    | Service
    | Faq
    | Review
    | Project
    | SiteCategory
    | Team
    | Specialist
    | SpecialistCategory
    | LinkInternal
    | Page
    | Home
    | FaqHome
    | StagesHome
    | TeamHome
    | ServicesHome
    | ReviewsHome
    | PortfolioHome
    | CallToAction
    | AboutUsHomeSection
    | HeroHome
    | LinkExternal
    | LinkEmail
    | InternationalizedArrayPortableColorTitleValue
    | InternationalizedArrayPortableTextSimpleValue
    | InternationalizedArrayPortableTextValue
    | InternationalizedArrayTextValue
    | InternationalizedArrayStringValue
    | InternationalizedArrayPortableColorTitle
    | InternationalizedArrayPortableTextSimple
    | InternationalizedArrayPortableText
    | InternationalizedArrayText
    | InternationalizedArrayString
    | TranslationMetadata
    | InternationalizedArrayReferenceValue
    | Settings
    | Button
    | SanityImageCrop
    | SanityImageHotspot
    | SanityImageAsset
    | SanityAssetSourceData
    | SanityImageMetadata
    | Seo
    | NotFoundPage
    | Footer
    | Header
    | InternationalizedArrayReference
    | Color
    | RgbaColor
    | HsvaColor
    | HslaColor
    | MediaTag
    | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/queries.ts
// Variable: homeHeroQuery
// Query: *[_type == "home"][0]{  "title": hero.title[_key == $language][0].value,  "portfolioSliderData": hero.portfolioSlider[]->{    "title": title[_key == $language][0].value,     image {      "caption": caption[_key == $language][0].value,       "asset": image.asset->url    },    "category": category->categoryName[_key == $language][0].value,    _id  }}
export type HomeHeroQueryResult = {
    title: string | null;
    portfolioSliderData: Array<{
        title: string | null;
        image: {
            caption: string | null;
            asset: string | null;
        } | null;
        category: string | null;
        _id: string;
    }> | null;
} | null;
// Variable: homePortfolioQuery
// Query: *[_type == "home"][0]{  portfolioHome{"title": title[_key == $language][0].value,     "subtitle": sectionId.subtitle[_key == $language][0].value, "anchorId": sectionId.anchorId.current,    "portfolioSliderData": portfolioSlider[]->{"title": title[_key == $language][0].value,     image {"caption":caption[_key == $language][0].value, "asset": image.asset->url},    "category":category->categoryName[_key == $language][0].value,    _id, stages, URL}  }}
export type HomePortfolioQueryResult = {
    portfolioHome: {
        title: PortableColorTitle | null;
        subtitle: string | null;
        anchorId: string | null;
        portfolioSliderData: Array<{
            title: string | null;
            image: {
                caption: string | null;
                asset: string | null;
            } | null;
            category: string | null;
            _id: string;
            stages: Array<string> | null;
            URL: LinkExternal | null;
        }> | null;
    } | null;
} | null;
// Variable: CTAQuery
// Query: *[_type == "home"][0]{    ctaSectionWriteUs {"title": title[_key == $language][0].value},     ctaSectionJoinUs {"title": title[_key == $language][0].value},     ctaSectionOrder {"title": title[_key == $language][0].value,     "description": description[_key == $language][0].value[0].children[0].text}    }
export type CTAQueryResult = {
    ctaSectionWriteUs: {
        title: string | null;
    } | null;
    ctaSectionJoinUs: {
        title: string | null;
    } | null;
    ctaSectionOrder: {
        title: string | null;
        description: string | null;
    } | null;
} | null;
// Variable: settingsQuery
// Query: *[_type == "settings"][0]{  notFoundPage {"goToHomeButtonName":goToHomeButton.buttonName[_key == $language][0].value,  "buttonPageLink":select(goToHomeButton.buttonLink == "internal" => goToHomeButton.linkInternal.reference->pageSlug.current,     goToHomeButton.buttonLink == "external" => goToHomeButton.linkExternal.url    ),    "titleNotFound":title[_key == $language][0].value,     "descriptionNotFound":description[_key == $language][0].value},    header {"socialLinks": socialLinks[]{platform, "url":url.url, "newWindow":url.newWindow},  "navigationMenu": navigationMenu[]{  linkInternal,  "titleMenu":title[_key == $language][0].value  }},   buttonJoinUS {"buttonName":buttonName[_key == $language][0].value,      "buttonPageLink":select(buttonLink == "internal" => linkInternal.reference->pageSlug.current,     buttonLink == "external" => linkExternal.url    ),     "newWindow":select(buttonLink == "external" =>linkExternal.newWindow,                         buttonLink == "internal" => false)},    buttonOrder {..., "buttonName":buttonName[_key == $language][0].value},    buttonBuyMeCoffee {..., "buttonName":buttonName[_key == $language][0].value}  }
export type SettingsQueryResult = {
    notFoundPage: {
        goToHomeButtonName: string | null;
        buttonPageLink: string | null;
        titleNotFound: string | null;
        descriptionNotFound: string | null;
    } | null;
    header: {
        socialLinks: Array<{
            platform:
                | "behance"
                | "email"
                | "facebook"
                | "github"
                | "googleDrive"
                | "instagram"
                | "linkedin"
                | "pinterest"
                | "telegram"
                | "twitter"
                | "whatsapp"
                | "youtube"
                | null;
            url: string | null;
            newWindow: boolean | null;
        }> | null;
        navigationMenu: Array<{
            linkInternal: string | null;
            titleMenu: string | null;
        }> | null;
    } | null;
    buttonJoinUS: {
        buttonName: string | null;
        buttonPageLink: string | null;
        newWindow: boolean | false | null;
    } | null;
    buttonOrder: {
        _type: "button";
        buttonName: string | null;
        buttonLink?: "external" | "internal" | "noLink";
        linkInternal?: LinkInternal;
        linkExternal?: LinkExternal;
    } | null;
    buttonBuyMeCoffee: {
        _type: "button";
        buttonName: string | null;
        buttonLink?: "external" | "internal" | "noLink";
        linkInternal?: LinkInternal;
        linkExternal?: LinkExternal;
    } | null;
} | null;
// Variable: footerQuery
// Query: *[_type == "settings"][0]{    "title": footer.title[_key == $language][0].value,      "rightsReserved": footer.rightsReserved[_key == $language][0].value,      "privacyPolicyTitle": footer.privacyPolicy.title[_key == $language][0].value,      "privacyPolicyURL": footer.privacyPolicy.url[$language][0].url,      "privacyPolicyNewWindow": footer.privacyPolicy.url[$language][0].newWindow,       "navigationMenu": footer.navigationMenu[]{      linkInternal,      "titleMenu":title[_key == $language][0].value    }          }
export type FooterQueryResult = {
    title: PortableColorTitle | null;
    rightsReserved: string | null;
    privacyPolicyTitle: string | null;
    privacyPolicyURL: null;
    privacyPolicyNewWindow: null;
    navigationMenu: Array<{
        linkInternal: string | null;
        titleMenu: string | null;
    }> | null;
} | null;
// Variable: projectQuery
// Query: *[_type == "project"]{_id,"title": title[_key == $language][0].value,   image {"caption":caption[_key == $language][0].value, "asset": asset->url},   stages, URL,   "category":category->categoryName[_key == $language][0].value}
export type ProjectQueryResult = Array<{
    _id: string;
    title: string | null;
    image: {
        caption: string | null;
        asset: null;
    } | null;
    stages: Array<string> | null;
    URL: LinkExternal | null;
    category: string | null;
}>;
// Variable: homeServicesQuery
// Query: *[_type == "home"][0]   { servicesHome {  "title": title[_key == $language][0].value,  "description": description[_key == $language][0].value,  "subtitle": sectionId.subtitle[_key == $language][0].value,   "anchorId": sectionId.anchorId.current,  "servicesListTitle":servicesList[]->title[_key == $language][0].value,  "servicesListText":servicesList[]->description[_key == $language][0].value}}
export type HomeServicesQueryResult = {
    servicesHome: {
        title: PortableColorTitle | null;
        description: string | null;
        subtitle: string | null;
        anchorId: string | null;
        servicesListTitle: Array<string | null> | null;
        servicesListText: Array<string | null> | null;
    } | null;
} | null;
// Variable: homeStagesQuery
// Query: *[_type == "home"][0]{stagesHome {  "title": title[_key == $language][0].value,  "subtitle": sectionId.subtitle[_key == $language][0].value,   "anchorId": sectionId.anchorId.current,  "stagesListTitle":stagesList[].title[_key == $language][0].value ,  "stagesListText":stagesList[].description[_key == $language][0].value}}
export type HomeStagesQueryResult = {
    stagesHome: {
        title: PortableColorTitle | null;
        subtitle: string | null;
        anchorId: string | null;
        stagesListTitle: Array<string | null> | null;
        stagesListText: Array<string | null> | null;
    } | null;
} | null;
// Variable: homeAboutUsQuery
// Query: *[_type == "home"][0]{aboutUsHomeSection {  "title": sectionTitle[_key == $language][0].value,  "aboutUsItemInfo": aboutUsItemInfo[].aboutUs[_key == $language][0].value,  "subtitle": sectionId.subtitle[_key == $language][0].value,   "anchorId": sectionId.anchorId.current,  "learnMoreButtonName":learnMoreButton.buttonName[_key == $language][0].value,  "buttonPageLink":select(learnMoreButton.buttonLink == "internal" => learnMoreButton.linkInternal.reference->pageSlug.current,     learnMoreButton.buttonLink == "external" => learnMoreButton.linkExternal.url    )} }
export type HomeAboutUsQueryResult = {
    aboutUsHomeSection: {
        title: PortableColorTitle | null;
        aboutUsItemInfo: Array<string | null> | null;
        subtitle: string | null;
        anchorId: string | null;
        learnMoreButtonName: string | null;
        buttonPageLink: string | null;
    } | null;
} | null;
// Variable: homeFAQQuery
// Query: *[_type == "home"][0]{  "title": faqHome.title[_key == $language][0].value,  "subtitle": faqHome.sectionId.subtitle[_key == $language][0].value,   "anchorId": faqHome.sectionId.anchorId.current,  "faqList": faqHome.faqList[]->{"question":question[_key == $language][0].value,                                  "shortAnswer":shortAnswer[_key == $language][0].value}}
export type HomeFAQQueryResult = {
    title: PortableColorTitle | null;
    subtitle: string | null;
    anchorId: string | null;
    faqList: Array<{
        question: string | null;
        shortAnswer: string | null;
    }> | null;
} | null;
// Variable: homeReviewsQuery
// Query: *[_type == "home"][0]{    "title": reviewsHome.title[_key == $language][0].value,    "subtitle": reviewsHome.sectionId.subtitle[_key == $language][0].value,    "anchorId": reviewsHome.sectionId.anchorId.current,    "feedbacks": reviewsHome.reviewsSlider[] {      _type == "reference" => @->{_id,        "reviewText": reviewText[_key == $language][0].value,        "feedbackLink": reviewUrl.url,        "newWindow": reviewUrl.newWindow,        "altImage": image.caption[_key == $language][0].value,        "asset": image.image.asset->url,        "reviewerName": select(          reviewer[0]._type == "reference" => reviewer[0]->name[_key == $language][0].value,          reviewer[0]._type != "reference" => reviewer[0].name[_key == $language][0].value        ),        "reviewerPosition": select(          reviewer[0]._type == "reference" => reviewer[0]->position[_key == $language][0].value,          reviewer[0]._type != "reference" => reviewer[0].position[_key == $language][0].value        ),        "projectName": project->title[_key == $language][0].value,        "projectURL": project->URL.url,                                  "projectCategory": project->category->categoryName[_key == $language][0].value      }    }  }
export type HomeReviewsQueryResult = {
    title: PortableColorTitle | null;
    subtitle: string | null;
    anchorId: string | null;
    feedbacks: Array<{
        _id: string;
        reviewText: string | null;
        feedbackLink: string | null;
        newWindow: boolean | null;
        altImage: string | null;
        asset: string | null;
        reviewerName: string | null;
        reviewerPosition: string | null;
        projectName: string | null;
        projectURL: string | null;
        projectCategory: string | null;
    }> | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
    interface SanityQueries {
        '\n  *[_type == "home"][0]{\n  "title": hero.title[_key == $language][0].value,\n  "portfolioSliderData": hero.portfolioSlider[]->{\n    "title": title[_key == $language][0].value, \n    image {\n      "caption": caption[_key == $language][0].value, \n      "asset": image.asset->url\n    },\n    "category": category->categoryName[_key == $language][0].value,\n    _id\n  }\n}': HomeHeroQueryResult;
        '\n  *[_type == "home"][0]{\n  portfolioHome{"title": title[_key == $language][0].value, \n    "subtitle": sectionId.subtitle[_key == $language][0].value, "anchorId": sectionId.anchorId.current,\n    "portfolioSliderData": portfolioSlider[]->{"title": title[_key == $language][0].value, \n    image {"caption":caption[_key == $language][0].value, "asset": image.asset->url},\n    "category":category->categoryName[_key == $language][0].value,\n    _id, stages, URL}\n  }\n}': HomePortfolioQueryResult;
        '\n *[_type == "home"][0]{\n    ctaSectionWriteUs {"title": title[_key == $language][0].value}, \n    ctaSectionJoinUs {"title": title[_key == $language][0].value}, \n    ctaSectionOrder {"title": title[_key == $language][0].value, \n    "description": description[_key == $language][0].value[0].children[0].text}\n    }': CTAQueryResult;
        '\n  *[_type == "settings"][0]{\n  notFoundPage {"goToHomeButtonName":goToHomeButton.buttonName[_key == $language][0].value,  "buttonPageLink":select(goToHomeButton.buttonLink == "internal" => goToHomeButton.linkInternal.reference->pageSlug.current,\n     goToHomeButton.buttonLink == "external" => goToHomeButton.linkExternal.url\n    ),\n    "titleNotFound":title[_key == $language][0].value, \n    "descriptionNotFound":description[_key == $language][0].value},\n  \n  header {"socialLinks": socialLinks[]{platform, "url":url.url, "newWindow":url.newWindow},\n  "navigationMenu": navigationMenu[]{\n  linkInternal,\n  "titleMenu":title[_key == $language][0].value\n  }},\n   buttonJoinUS {"buttonName":buttonName[_key == $language][0].value,\n      "buttonPageLink":select(buttonLink == "internal" => linkInternal.reference->pageSlug.current,\n     buttonLink == "external" => linkExternal.url\n    ),\n     "newWindow":select(buttonLink == "external" =>linkExternal.newWindow, \n                        buttonLink == "internal" => false)},\n    buttonOrder {..., "buttonName":buttonName[_key == $language][0].value},\n    buttonBuyMeCoffee {..., "buttonName":buttonName[_key == $language][0].value}\n  }\n': SettingsQueryResult;
        '\n*[_type == "settings"][0]\n{\n    "title": footer.title[_key == $language][0].value,\n      "rightsReserved": footer.rightsReserved[_key == $language][0].value,\n      "privacyPolicyTitle": footer.privacyPolicy.title[_key == $language][0].value,\n      "privacyPolicyURL": footer.privacyPolicy.url[$language][0].url,\n      "privacyPolicyNewWindow": footer.privacyPolicy.url[$language][0].newWindow,\n       "navigationMenu": footer.navigationMenu[]{\n      linkInternal,\n      "titleMenu":title[_key == $language][0].value\n    }\n          }': FooterQueryResult;
        '\n*[_type == "project"]\n{_id,\n"title": title[_key == $language][0].value, \n  image {"caption":caption[_key == $language][0].value, "asset": asset->url}, \n  stages, URL, \n  "category":category->categoryName[_key == $language][0].value}\n': ProjectQueryResult;
        '\n  *[_type == "home"][0] \n  { servicesHome {\n  "title": title[_key == $language][0].value,\n  "description": description[_key == $language][0].value,\n  "subtitle": sectionId.subtitle[_key == $language][0].value, \n  "anchorId": sectionId.anchorId.current,\n  "servicesListTitle":servicesList[]->title[_key == $language][0].value,\n  "servicesListText":servicesList[]->description[_key == $language][0].value\n}}': HomeServicesQueryResult;
        '\n  *[_type == "home"][0]{stagesHome {\n  "title": title[_key == $language][0].value,\n  "subtitle": sectionId.subtitle[_key == $language][0].value, \n  "anchorId": sectionId.anchorId.current,\n  "stagesListTitle":stagesList[].title[_key == $language][0].value ,\n  "stagesListText":stagesList[].description[_key == $language][0].value\n}}': HomeStagesQueryResult;
        '\n *[_type == "home"][0]{aboutUsHomeSection {\n  "title": sectionTitle[_key == $language][0].value,\n  "aboutUsItemInfo": aboutUsItemInfo[].aboutUs[_key == $language][0].value,\n  "subtitle": sectionId.subtitle[_key == $language][0].value, \n  "anchorId": sectionId.anchorId.current,\n  "learnMoreButtonName":learnMoreButton.buttonName[_key == $language][0].value,\n  "buttonPageLink":select(learnMoreButton.buttonLink == "internal" => learnMoreButton.linkInternal.reference->pageSlug.current,\n     learnMoreButton.buttonLink == "external" => learnMoreButton.linkExternal.url\n    )} }': HomeAboutUsQueryResult;
        '\n  *[_type == "home"][0]{\n  "title": faqHome.title[_key == $language][0].value,\n  "subtitle": faqHome.sectionId.subtitle[_key == $language][0].value, \n  "anchorId": faqHome.sectionId.anchorId.current,\n  "faqList": faqHome.faqList[]->{"question":question[_key == $language][0].value, \n                                 "shortAnswer":shortAnswer[_key == $language][0].value}\n}': HomeFAQQueryResult;
        '\n*[_type == "home"][0]{\n    "title": reviewsHome.title[_key == $language][0].value,\n    "subtitle": reviewsHome.sectionId.subtitle[_key == $language][0].value,\n    "anchorId": reviewsHome.sectionId.anchorId.current,\n    "feedbacks": reviewsHome.reviewsSlider[] {\n      _type == "reference" => @->{_id,\n        "reviewText": reviewText[_key == $language][0].value,\n        "feedbackLink": reviewUrl.url,\n        "newWindow": reviewUrl.newWindow,\n        "altImage": image.caption[_key == $language][0].value,\n        "asset": image.image.asset->url,\n        "reviewerName": select(\n          reviewer[0]._type == "reference" => reviewer[0]->name[_key == $language][0].value,\n          reviewer[0]._type != "reference" => reviewer[0].name[_key == $language][0].value\n        ),\n        "reviewerPosition": select(\n          reviewer[0]._type == "reference" => reviewer[0]->position[_key == $language][0].value,\n          reviewer[0]._type != "reference" => reviewer[0].position[_key == $language][0].value\n        ),\n        "projectName": project->title[_key == $language][0].value,\n        "projectURL": project->URL.url,                          \n        "projectCategory": project->category->categoryName[_key == $language][0].value\n      }\n    }\n  }\n': HomeReviewsQueryResult;
    }
}
